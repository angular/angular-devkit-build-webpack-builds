"use strict";
// tslint:disable
// TODO: cleanup this file, it's copied as is from Angular CLI.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
exports.ngAppResolve = (resolvePath) => {
    return path.resolve(process.cwd(), resolvePath);
};
const webpackOutputOptions = {
    colors: true,
    hash: true,
    timings: true,
    chunks: true,
    chunkModules: false,
    children: false,
    modules: false,
    reasons: false,
    warnings: true,
    errors: true,
    assets: true,
    version: false,
    errorDetails: false,
    moduleTrace: false,
};
const verboseWebpackOutputOptions = {
    children: true,
    assets: true,
    version: true,
    reasons: true,
    chunkModules: false,
    errorDetails: true,
    moduleTrace: true,
};
function getWebpackStatsConfig(verbose = false) {
    return verbose
        ? Object.assign(webpackOutputOptions, verboseWebpackOutputOptions)
        : webpackOutputOptions;
}
exports.getWebpackStatsConfig = getWebpackStatsConfig;
// Filter extra entries out of a arran of extraEntries
function lazyChunksFilter(extraEntries) {
    return extraEntries
        .filter(extraEntry => extraEntry.lazy)
        .map(extraEntry => extraEntry.entry);
}
exports.lazyChunksFilter = lazyChunksFilter;
// convert all extra entries into the object representation, fill in defaults
function extraEntryParser(extraEntries, appRoot, defaultEntry) {
    return extraEntries
        .map((extraEntry) => typeof extraEntry === 'string' ? { input: extraEntry } : extraEntry)
        .map((extraEntry) => {
        extraEntry.path = path.resolve(appRoot, extraEntry.input);
        if (extraEntry.output) {
            extraEntry.entry = extraEntry.output.replace(/\.(js|css)$/i, '');
        }
        else if (extraEntry.lazy) {
            extraEntry.entry = path.basename(extraEntry.input.replace(/\.(js|css|scss|sass|less|styl)$/i, ''));
        }
        else {
            extraEntry.entry = defaultEntry;
        }
        return extraEntry;
    });
}
exports.extraEntryParser = extraEntryParser;
function getOutputHashFormat(option, length = 20) {
    /* tslint:disable:max-line-length */
    const hashFormats = {
        none: { chunk: '', extract: '', file: '', script: '' },
        media: { chunk: '', extract: '', file: `.[hash:${length}]`, script: '' },
        bundles: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: '', script: `.[hash:${length}]` },
        all: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: `.[hash:${length}]`, script: `.[hash:${length}]` },
    };
    /* tslint:enable:max-line-length */
    return hashFormats[option] || hashFormats['none'];
}
exports.getOutputHashFormat = getOutputHashFormat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX3dlYnBhY2svc3JjL2FuZ3VsYXItY2xpLWZpbGVzL21vZGVscy93ZWJwYWNrLWNvbmZpZ3MvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlCQUFpQjtBQUNqQiwrREFBK0Q7O0FBRS9ELDZCQUE2QjtBQUVoQixRQUFBLFlBQVksR0FBRyxDQUFDLFdBQW1CLEVBQVUsRUFBRTtJQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRztJQUMzQixNQUFNLEVBQUUsSUFBSTtJQUNaLElBQUksRUFBRSxJQUFJO0lBQ1YsT0FBTyxFQUFFLElBQUk7SUFDYixNQUFNLEVBQUUsSUFBSTtJQUNaLFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxLQUFLO0lBQ2YsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxJQUFJO0lBQ2QsTUFBTSxFQUFFLElBQUk7SUFDWixNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxLQUFLO0lBQ2QsWUFBWSxFQUFFLEtBQUs7SUFDbkIsV0FBVyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQztBQUVGLE1BQU0sMkJBQTJCLEdBQUc7SUFDbEMsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7SUFDYixZQUFZLEVBQUUsS0FBSztJQUNuQixZQUFZLEVBQUUsSUFBSTtJQUNsQixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsK0JBQXNDLE9BQU8sR0FBRyxLQUFLO0lBQ25ELE1BQU0sQ0FBQyxPQUFPO1FBQ1osQ0FB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IHRoaXMgZmlsZSwgaXQncyBjb3BpZWQgYXMgaXMgZnJvbSBBbmd1bGFyIENMSS5cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGNvbnN0IG5nQXBwUmVzb2x2ZSA9IChyZXNvbHZlUGF0aDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCByZXNvbHZlUGF0aCk7XG59O1xuXG5jb25zdCB3ZWJwYWNrT3V0cHV0T3B0aW9ucyA9IHtcbiAgY29sb3JzOiB0cnVlLFxuICBoYXNoOiB0cnVlLCAvLyByZXF1aXJlZCBieSBjdXN0b20gc3RhdCBvdXRwdXRcbiAgdGltaW5nczogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIGNodW5rczogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIGNodW5rTW9kdWxlczogZmFsc2UsXG4gIGNoaWxkcmVuOiBmYWxzZSwgLy8gbGlzdGluZyBhbGwgY2hpbGRyZW4gaXMgdmVyeSBub2lzeSBpbiBBT1QgYW5kIGhpZGVzIHdhcm5pbmdzL2Vycm9yc1xuICBtb2R1bGVzOiBmYWxzZSxcbiAgcmVhc29uczogZmFsc2UsXG4gIHdhcm5pbmdzOiB0cnVlLFxuICBlcnJvcnM6IHRydWUsXG4gIGFzc2V0czogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIHZlcnNpb246IGZhbHNlLFxuICBlcnJvckRldGFpbHM6IGZhbHNlLFxuICBtb2R1bGVUcmFjZTogZmFsc2UsXG59O1xuXG5jb25zdCB2ZXJib3NlV2VicGFja091dHB1dE9wdGlvbnMgPSB7XG4gIGNoaWxkcmVuOiB0cnVlLFxuICBhc3NldHM6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG4gIHJlYXNvbnM6IHRydWUsXG4gIGNodW5rTW9kdWxlczogZmFsc2UsIC8vIFRPRE86IHNldCB0byB0cnVlIHdoZW4gY29uc29sZSB0byBmaWxlIG91dHB1dCBpcyBmaXhlZFxuICBlcnJvckRldGFpbHM6IHRydWUsXG4gIG1vZHVsZVRyYWNlOiB0cnVlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlYnBhY2tTdGF0c0NvbmZpZyh2ZXJib3NlID0gZmFsc2UpIHtcbiAgcmV0dXJuIHZlcmJvc2VcbiAgICA/IE9iamVjdC5hc3NpZ24od2VicGFja091dHB1dE9wdGlvbnMsIHZlcmJvc2VXZWJwYWNrT3V0cHV0T3B0aW9ucylcbiAgICA6IHdlYnBhY2tPdXRwdXRPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhRW50cnkge1xuICBpbnB1dDogc3RyaW5nO1xuICBvdXRwdXQ/OiBzdHJpbmc7XG4gIGxhenk/OiBib29sZWFuO1xuICBwYXRoPzogc3RyaW5nO1xuICBlbnRyeT86IHN0cmluZztcbn1cblxuLy8gRmlsdGVyIGV4dHJhIGVudHJpZXMgb3V0IG9mIGEgYXJyYW4gb2YgZXh0cmFFbnRyaWVzXG5leHBvcnQgZnVuY3Rpb24gbGF6eUNodW5rc0ZpbHRlcihleHRyYUVudHJpZXM6IEV4dHJhRW50cnlbXSkge1xuICByZXR1cm4gZXh0cmFFbnRyaWVzXG4gICAgLmZpbHRlcihleHRyYUVudHJ5ID0+IGV4dHJhRW50cnkubGF6eSlcbiAgICAubWFwKGV4dHJhRW50cnkgPT4gZXh0cmFFbnRyeS5lbnRyeSk7XG59XG5cbi8vIGNvbnZlcnQgYWxsIGV4dHJhIGVudHJpZXMgaW50byB0aGUgb2JqZWN0IHJlcHJlc2VudGF0aW9uLCBmaWxsIGluIGRlZmF1bHRzXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFFbnRyeVBhcnNlcihcbiAgZXh0cmFFbnRyaWVzOiAoc3RyaW5nIHwgRXh0cmFFbnRyeSlbXSxcbiAgYXBwUm9vdDogc3RyaW5nLFxuICBkZWZhdWx0RW50cnk6IHN0cmluZ1xuKTogRXh0cmFFbnRyeVtdIHtcbiAgcmV0dXJuIGV4dHJhRW50cmllc1xuICAgIC5tYXAoKGV4dHJhRW50cnk6IHN0cmluZyB8IEV4dHJhRW50cnkpID0+XG4gICAgICB0eXBlb2YgZXh0cmFFbnRyeSA9PT0gJ3N0cmluZycgPyB7IGlucHV0OiBleHRyYUVudHJ5IH0gOiBleHRyYUVudHJ5KVxuICAgIC5tYXAoKGV4dHJhRW50cnk6IEV4dHJhRW50cnkpID0+IHtcbiAgICAgIGV4dHJhRW50cnkucGF0aCA9IHBhdGgucmVzb2x2ZShhcHBSb290LCBleHRyYUVudHJ5LmlucHV0KTtcbiAgICAgIGlmIChleHRyYUVudHJ5Lm91dHB1dCkge1xuICAgICAgICBleHRyYUVudHJ5LmVudHJ5ID0gZXh0cmFFbnRyeS5vdXRwdXQucmVwbGFjZSgvXFwuKGpzfGNzcykkL2ksICcnKTtcbiAgICAgIH0gZWxzZSBpZiAoZXh0cmFFbnRyeS5sYXp5KSB7XG4gICAgICAgIGV4dHJhRW50cnkuZW50cnkgPSBwYXRoLmJhc2VuYW1lKGV4dHJhRW50cnkuaW5wdXQucmVwbGFjZSgvXFwuKGpzfGNzc3xzY3NzfHNhc3N8bGVzc3xzdHlsKSQvaSwgJycpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4dHJhRW50cnkuZW50cnkgPSBkZWZhdWx0RW50cnk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXh0cmFFbnRyeTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIYXNoRm9ybWF0IHtcbiAgY2h1bms6IHN0cmluZztcbiAgZXh0cmFjdDogc3RyaW5nO1xuICBmaWxlOiBzdHJpbmc7XG4gIHNjcmlwdDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0cHV0SGFzaEZvcm1hdChvcHRpb246IHN0cmluZywgbGVuZ3RoID0gMjApOiBIYXNoRm9ybWF0IHtcbiAgLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4gIGNvbnN0IGhhc2hGb3JtYXRzOiB7IFtvcHRpb246IHN0cmluZ106IEhhc2hGb3JtYXQgfSA9IHtcbiAgICBub25lOiAgICB7IGNodW5rOiAnJywgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3Q6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiAnJyAgICAgICAgICAgICAgICAgLCBzY3JpcHQ6ICcnIH0sXG4gICAgbWVkaWE6ICAgeyBjaHVuazogJycsICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogYC5baGFzaDoke2xlbmd0aH1dYCwgc2NyaXB0OiAnJyAgfSxcbiAgICBidW5kbGVzOiB7IGNodW5rOiBgLltjaHVua2hhc2g6JHtsZW5ndGh9XWAsIGV4dHJhY3Q6IGAuW2NvbnRlbnRoYXNoOiR7bGVuZ3RofV1gLCBmaWxlOiAnJyAgICAgICAgICAgICAgICAgLCBzY3JpcHQ6IGAuW2hhc2g6JHtsZW5ndGh9XWAgIH0sXG4gICAgYWxsOiAgICAgeyBjaHVuazogYC5bY2h1bmtoYXNoOiR7bGVuZ3RofV1gLCBleHRyYWN0OiBgLltjb250ZW50aGFzaDoke2xlbmd0aH1dYCwgZmlsZTogYC5baGFzaDoke2xlbmd0aH1dYCwgc2NyaXB0OiBgLltoYXNoOiR7bGVuZ3RofV1gICB9LFxuICB9O1xuICAvKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuICByZXR1cm4gaGFzaEZvcm1hdHNbb3B0aW9uXSB8fCBoYXNoRm9ybWF0c1snbm9uZSddO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0UGF0dGVybiB7XG4gIGdsb2I6IHN0cmluZztcbiAgaW5wdXQ/OiBzdHJpbmc7XG4gIG91dHB1dD86IHN0cmluZztcbiAgYWxsb3dPdXRzaWRlT3V0RGlyPzogYm9vbGVhbjtcbn1cbiJdfQ==