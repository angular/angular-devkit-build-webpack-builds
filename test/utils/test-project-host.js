"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const child_process_1 = require("child_process");
const Observable_1 = require("rxjs/Observable");
const empty_1 = require("rxjs/observable/empty");
const operators_1 = require("rxjs/operators");
class TestProjectHost extends node_1.NodeJsSyncHost {
    constructor(_root) {
        super();
        this._root = _root;
        this._scopedSyncHost = new core_1.virtualFs.SyncDelegateHost(new core_1.virtualFs.ScopedHost(this, _root));
    }
    scopedSync() {
        return this._scopedSyncHost;
    }
    initialize() {
        return this.exists(core_1.normalize('.git')).pipe(operators_1.concatMap(exists => !exists ? this._gitInit() : empty_1.empty()));
    }
    restore() {
        return this._gitClean();
    }
    _gitClean() {
        return this._exec('git', ['clean', '-fd']).pipe(operators_1.concatMap(() => this._exec('git', ['checkout', '.'])), operators_1.map(() => { }));
    }
    _gitInit() {
        return this._exec('git', ['init']).pipe(operators_1.concatMap(() => this._exec('git', ['config', 'user.email', 'angular-core+e2e@google.com'])), operators_1.concatMap(() => this._exec('git', ['config', 'user.name', 'Angular DevKit Tests'])), operators_1.concatMap(() => this._exec('git', ['add', '--all'])), operators_1.concatMap(() => this._exec('git', ['commit', '-am', '"Initial commit"'])), operators_1.map(() => { }));
    }
    _exec(cmd, args) {
        return new Observable_1.Observable(obs => {
            args = args.filter(x => x !== undefined);
            let stdout = '';
            let stderr = '';
            const spawnOptions = { cwd: core_1.getSystemPath(this._root) };
            if (process.platform.startsWith('win')) {
                args.unshift('/c', cmd);
                cmd = 'cmd.exe';
                spawnOptions['stdio'] = 'pipe';
            }
            const childProcess = child_process_1.spawn(cmd, args, spawnOptions);
            childProcess.stdout.on('data', (data) => stdout += data.toString('utf-8'));
            childProcess.stderr.on('data', (data) => stderr += data.toString('utf-8'));
            // Create the error here so the stack shows who called this function.
            const err = new Error(`Running "${cmd} ${args.join(' ')}" returned error code `);
            childProcess.on('exit', (code) => {
                if (!code) {
                    obs.next({ stdout, stderr });
                }
                else {
                    err.message += `${code}.\n\nSTDOUT:\n${stdout}\n\nSTDERR:\n${stderr}\n`;
                    obs.error(err);
                }
                obs.complete();
            });
        });
    }
    writeMultipleFiles(files) {
        Object.keys(files).map(fileName => this.scopedSync().write(core_1.normalize(fileName), core_1.virtualFs.stringToFileBuffer(files[fileName])));
    }
    replaceInFile(path, match, replacement) {
        const content = core_1.virtualFs.fileBufferToString(this.scopedSync().read(core_1.normalize(path)));
        this.scopedSync().write(core_1.normalize(path), core_1.virtualFs.stringToFileBuffer(content.replace(match, replacement)));
    }
    appendToFile(path, str) {
        const content = core_1.virtualFs.fileBufferToString(this.scopedSync().read(core_1.normalize(path)));
        this.scopedSync().write(core_1.normalize(path), core_1.virtualFs.stringToFileBuffer(content.concat(str)));
    }
    fileMatchExists(dir, regex) {
        const [fileName] = this.scopedSync().list(core_1.normalize(dir)).filter(name => name.match(regex));
        return fileName || undefined;
    }
    copyFile(from, to) {
        const content = this.scopedSync().read(core_1.normalize(from));
        this.scopedSync().write(core_1.normalize(to), content);
    }
}
exports.TestProjectHost = TestProjectHost;
//# sourceMappingURL=data:application/json;base64,