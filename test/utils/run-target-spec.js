"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const test_project_host_1 = require("../utils/test-project-host");
const workspaceFile = core_1.normalize('.angular.json');
const devkitRoot = core_1.normalize(global._DevKitRoot); // tslint:disable-line:no-any
exports.workspaceRoot = core_1.join(devkitRoot, 'tests/@angular_devkit/build_webpack/hello-world-app/');
exports.host = new test_project_host_1.TestProjectHost(exports.workspaceRoot);
exports.outputPath = core_1.normalize('dist');
exports.browserTargetSpec = { project: 'app', target: 'build' };
exports.devServerTargetSpec = { project: 'app', target: 'serve' };
exports.extractI18nTargetSpec = { project: 'app', target: 'extract-i18n' };
exports.karmaTargetSpec = { project: 'app', target: 'test' };
exports.tslintTargetSpec = { project: 'app', target: 'lint' };
exports.protractorTargetSpec = { project: 'app-e2e', target: 'e2e' };
function runTargetSpec(host, targetSpec, overrides = {}, logger = new core_1.logging.NullLogger()) {
    targetSpec = Object.assign({}, targetSpec, { overrides });
    const workspace = new core_1.experimental.workspace.Workspace(exports.workspaceRoot, host);
    return workspace.loadWorkspaceFromHost(workspaceFile).pipe(operators_1.concatMap(ws => new architect_1.Architect(ws).loadArchitect()), operators_1.concatMap(arch => arch.run(arch.getBuilderConfiguration(targetSpec), { logger })));
}
exports.runTargetSpec = runTargetSpec;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLXRhcmdldC1zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF93ZWJwYWNrL3Rlc3QvdXRpbHMvcnVuLXRhcmdldC1zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgseURBQW1GO0FBQ25GLCtDQUE4RTtBQUU5RSw4Q0FBMkM7QUFDM0Msa0VBQTZEO0FBRzdELE1BQU0sYUFBYSxHQUFHLGdCQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FBRSxNQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFFM0UsUUFBQSxhQUFhLEdBQUcsV0FBSSxDQUFDLFVBQVUsRUFDMUMsc0RBQXNELENBQUMsQ0FBQztBQUM3QyxRQUFBLElBQUksR0FBRyxJQUFJLG1DQUFlLENBQUMscUJBQWEsQ0FBQyxDQUFDO0FBQzFDLFFBQUEsVUFBVSxHQUFHLGdCQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0IsUUFBQSxpQkFBaUIsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3hELFFBQUEsbUJBQW1CLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUMxRCxRQUFBLHFCQUFxQixHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLENBQUM7QUFDbkUsUUFBQSxlQUFlLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNyRCxRQUFBLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDdEQsUUFBQSxvQkFBb0IsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBRTFFLHVCQUNFLElBQXFCLEVBQ3JCLFVBQTJCLEVBQzNCLFNBQVMsR0FBRyxFQUFFLEVBQ2QsU0FBeUIsSUFBSSxjQUFPLENBQUMsVUFBVSxFQUFFO0lBRWpELFVBQVUscUJBQVEsVUFBVSxJQUFFLFNBQVMsR0FBRSxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLElBQUksbUJBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLHFCQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFNUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQ3hELHFCQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLHFCQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsRUFDbEQscUJBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUNsRixDQUFDO0FBQ0osQ0FBQztBQWJELHNDQWFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBBcmNoaXRlY3QsIEJ1aWxkRXZlbnQsIFRhcmdldFNwZWNpZmllciB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QnO1xuaW1wb3J0IHsgZXhwZXJpbWVudGFsLCBqb2luLCBsb2dnaW5nLCBub3JtYWxpemUgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGNvbmNhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRlc3RQcm9qZWN0SG9zdCB9IGZyb20gJy4uL3V0aWxzL3Rlc3QtcHJvamVjdC1ob3N0JztcblxuXG5jb25zdCB3b3Jrc3BhY2VGaWxlID0gbm9ybWFsaXplKCcuYW5ndWxhci5qc29uJyk7XG5jb25zdCBkZXZraXRSb290ID0gbm9ybWFsaXplKChnbG9iYWwgYXMgYW55KS5fRGV2S2l0Um9vdCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYW55XG5cbmV4cG9ydCBjb25zdCB3b3Jrc3BhY2VSb290ID0gam9pbihkZXZraXRSb290LFxuICAndGVzdHMvQGFuZ3VsYXJfZGV2a2l0L2J1aWxkX3dlYnBhY2svaGVsbG8td29ybGQtYXBwLycpO1xuZXhwb3J0IGNvbnN0IGhvc3QgPSBuZXcgVGVzdFByb2plY3RIb3N0KHdvcmtzcGFjZVJvb3QpO1xuZXhwb3J0IGNvbnN0IG91dHB1dFBhdGggPSBub3JtYWxpemUoJ2Rpc3QnKTtcbmV4cG9ydCBjb25zdCBicm93c2VyVGFyZ2V0U3BlYyA9IHsgcHJvamVjdDogJ2FwcCcsIHRhcmdldDogJ2J1aWxkJyB9O1xuZXhwb3J0IGNvbnN0IGRldlNlcnZlclRhcmdldFNwZWMgPSB7IHByb2plY3Q6ICdhcHAnLCB0YXJnZXQ6ICdzZXJ2ZScgfTtcbmV4cG9ydCBjb25zdCBleHRyYWN0STE4blRhcmdldFNwZWMgPSB7IHByb2plY3Q6ICdhcHAnLCB0YXJnZXQ6ICdleHRyYWN0LWkxOG4nIH07XG5leHBvcnQgY29uc3Qga2FybWFUYXJnZXRTcGVjID0geyBwcm9qZWN0OiAnYXBwJywgdGFyZ2V0OiAndGVzdCcgfTtcbmV4cG9ydCBjb25zdCB0c2xpbnRUYXJnZXRTcGVjID0geyBwcm9qZWN0OiAnYXBwJywgdGFyZ2V0OiAnbGludCcgfTtcbmV4cG9ydCBjb25zdCBwcm90cmFjdG9yVGFyZ2V0U3BlYyA9IHsgcHJvamVjdDogJ2FwcC1lMmUnLCB0YXJnZXQ6ICdlMmUnIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5UYXJnZXRTcGVjKFxuICBob3N0OiBUZXN0UHJvamVjdEhvc3QsXG4gIHRhcmdldFNwZWM6IFRhcmdldFNwZWNpZmllcixcbiAgb3ZlcnJpZGVzID0ge30sXG4gIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXIgPSBuZXcgbG9nZ2luZy5OdWxsTG9nZ2VyKCksXG4pOiBPYnNlcnZhYmxlPEJ1aWxkRXZlbnQ+IHtcbiAgdGFyZ2V0U3BlYyA9IHsgLi4udGFyZ2V0U3BlYywgb3ZlcnJpZGVzIH07XG4gIGNvbnN0IHdvcmtzcGFjZSA9IG5ldyBleHBlcmltZW50YWwud29ya3NwYWNlLldvcmtzcGFjZSh3b3Jrc3BhY2VSb290LCBob3N0KTtcblxuICByZXR1cm4gd29ya3NwYWNlLmxvYWRXb3Jrc3BhY2VGcm9tSG9zdCh3b3Jrc3BhY2VGaWxlKS5waXBlKFxuICAgIGNvbmNhdE1hcCh3cyA9PiBuZXcgQXJjaGl0ZWN0KHdzKS5sb2FkQXJjaGl0ZWN0KCkpLFxuICAgIGNvbmNhdE1hcChhcmNoID0+IGFyY2gucnVuKGFyY2guZ2V0QnVpbGRlckNvbmZpZ3VyYXRpb24odGFyZ2V0U3BlYyksIHsgbG9nZ2VyIH0pKSxcbiAgKTtcbn1cbiJdfQ==