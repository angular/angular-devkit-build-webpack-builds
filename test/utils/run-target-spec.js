"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const test_project_host_1 = require("../utils/test-project-host");
const workspaceFile = core_1.normalize('.angular.json');
const devkitRoot = core_1.normalize(global._DevKitRoot); // tslint:disable-line:no-any
exports.workspaceRoot = core_1.join(devkitRoot, 'tests/@angular_devkit/build_webpack/hello-world-app/');
exports.host = new test_project_host_1.TestProjectHost(exports.workspaceRoot);
exports.outputPath = core_1.normalize('dist');
exports.browserTargetSpec = { project: 'app', target: 'build' };
exports.devServerTargetSpec = { project: 'app', target: 'serve' };
exports.extractI18nTargetSpec = { project: 'app', target: 'extract-i18n' };
exports.karmaTargetSpec = { project: 'app', target: 'test' };
exports.tslintTargetSpec = { project: 'app', target: 'lint' };
exports.protractorTargetSpec = { project: 'app-e2e', target: 'e2e' };
function runTargetSpec(host, targetSpec, overrides = {}, logger = new core_1.logging.NullLogger()) {
    targetSpec = Object.assign({}, targetSpec, { overrides });
    const workspace = new core_1.experimental.workspace.Workspace(exports.workspaceRoot, host);
    let architect;
    return workspace.loadWorkspaceFromHost(workspaceFile).pipe(operators_1.concatMap(ws => new architect_1.Architect(ws).loadArchitect()), operators_1.tap(arch => architect = arch), operators_1.concatMap(() => architect.getBuilderConfiguration(targetSpec)), operators_1.concatMap(cfg => architect.run(cfg, { logger })));
}
exports.runTargetSpec = runTargetSpec;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLXRhcmdldC1zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF93ZWJwYWNrL3Rlc3QvdXRpbHMvcnVuLXRhcmdldC1zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgseURBQW1GO0FBQ25GLCtDQUE4RTtBQUU5RSw4Q0FBZ0Q7QUFDaEQsa0VBQTZEO0FBRzdELE1BQU0sYUFBYSxHQUFHLGdCQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FBRSxNQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFFM0UsUUFBQSxhQUFhLEdBQUcsV0FBSSxDQUFDLFVBQVUsRUFDMUMsc0RBQXNELENBQUMsQ0FBQztBQUM3QyxRQUFBLElBQUksR0FBRyxJQUFJLG1DQUFlLENBQUMscUJBQWEsQ0FBQyxDQUFDO0FBQzFDLFFBQUEsVUFBVSxHQUFHLGdCQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0IsUUFBQSxpQkFBaUIsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3hELFFBQUEsbUJBQW1CLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUMxRCxRQUFBLHFCQUFxQixHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLENBQUM7QUFDbkUsUUFBQSxlQUFlLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNyRCxRQUFBLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDdEQsUUFBQSxvQkFBb0IsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBRTFFLHVCQUNFLElBQXFCLEVBQ3JCLFVBQTJCLEVBQzNCLFNBQVMsR0FBRyxFQUFFLEVBQ2QsU0FBeUIsSUFBSSxjQUFPLENBQUMsVUFBVSxFQUFFO0lBRWpELFVBQVUscUJBQVEsVUFBVSxJQUFFLFNBQVMsR0FBRSxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLElBQUksbUJBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLHFCQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUUsSUFBSSxTQUFvQixDQUFDO0lBRXpCLE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUN4RCxxQkFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxxQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQ2xELGVBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFDN0IscUJBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDOUQscUJBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUNqRCxDQUFDO0FBQ0osQ0FBQztBQWhCRCxzQ0FnQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEFyY2hpdGVjdCwgQnVpbGRFdmVudCwgVGFyZ2V0U3BlY2lmaWVyIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBleHBlcmltZW50YWwsIGpvaW4sIGxvZ2dpbmcsIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUZXN0UHJvamVjdEhvc3QgfSBmcm9tICcuLi91dGlscy90ZXN0LXByb2plY3QtaG9zdCc7XG5cblxuY29uc3Qgd29ya3NwYWNlRmlsZSA9IG5vcm1hbGl6ZSgnLmFuZ3VsYXIuanNvbicpO1xuY29uc3QgZGV2a2l0Um9vdCA9IG5vcm1hbGl6ZSgoZ2xvYmFsIGFzIGFueSkuX0RldktpdFJvb3QpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuXG5leHBvcnQgY29uc3Qgd29ya3NwYWNlUm9vdCA9IGpvaW4oZGV2a2l0Um9vdCxcbiAgJ3Rlc3RzL0Bhbmd1bGFyX2RldmtpdC9idWlsZF93ZWJwYWNrL2hlbGxvLXdvcmxkLWFwcC8nKTtcbmV4cG9ydCBjb25zdCBob3N0ID0gbmV3IFRlc3RQcm9qZWN0SG9zdCh3b3Jrc3BhY2VSb290KTtcbmV4cG9ydCBjb25zdCBvdXRwdXRQYXRoID0gbm9ybWFsaXplKCdkaXN0Jyk7XG5leHBvcnQgY29uc3QgYnJvd3NlclRhcmdldFNwZWMgPSB7IHByb2plY3Q6ICdhcHAnLCB0YXJnZXQ6ICdidWlsZCcgfTtcbmV4cG9ydCBjb25zdCBkZXZTZXJ2ZXJUYXJnZXRTcGVjID0geyBwcm9qZWN0OiAnYXBwJywgdGFyZ2V0OiAnc2VydmUnIH07XG5leHBvcnQgY29uc3QgZXh0cmFjdEkxOG5UYXJnZXRTcGVjID0geyBwcm9qZWN0OiAnYXBwJywgdGFyZ2V0OiAnZXh0cmFjdC1pMThuJyB9O1xuZXhwb3J0IGNvbnN0IGthcm1hVGFyZ2V0U3BlYyA9IHsgcHJvamVjdDogJ2FwcCcsIHRhcmdldDogJ3Rlc3QnIH07XG5leHBvcnQgY29uc3QgdHNsaW50VGFyZ2V0U3BlYyA9IHsgcHJvamVjdDogJ2FwcCcsIHRhcmdldDogJ2xpbnQnIH07XG5leHBvcnQgY29uc3QgcHJvdHJhY3RvclRhcmdldFNwZWMgPSB7IHByb2plY3Q6ICdhcHAtZTJlJywgdGFyZ2V0OiAnZTJlJyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuVGFyZ2V0U3BlYyhcbiAgaG9zdDogVGVzdFByb2plY3RIb3N0LFxuICB0YXJnZXRTcGVjOiBUYXJnZXRTcGVjaWZpZXIsXG4gIG92ZXJyaWRlcyA9IHt9LFxuICBsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyID0gbmV3IGxvZ2dpbmcuTnVsbExvZ2dlcigpLFxuKTogT2JzZXJ2YWJsZTxCdWlsZEV2ZW50PiB7XG4gIHRhcmdldFNwZWMgPSB7IC4uLnRhcmdldFNwZWMsIG92ZXJyaWRlcyB9O1xuICBjb25zdCB3b3Jrc3BhY2UgPSBuZXcgZXhwZXJpbWVudGFsLndvcmtzcGFjZS5Xb3Jrc3BhY2Uod29ya3NwYWNlUm9vdCwgaG9zdCk7XG4gIGxldCBhcmNoaXRlY3Q6IEFyY2hpdGVjdDtcblxuICByZXR1cm4gd29ya3NwYWNlLmxvYWRXb3Jrc3BhY2VGcm9tSG9zdCh3b3Jrc3BhY2VGaWxlKS5waXBlKFxuICAgIGNvbmNhdE1hcCh3cyA9PiBuZXcgQXJjaGl0ZWN0KHdzKS5sb2FkQXJjaGl0ZWN0KCkpLFxuICAgIHRhcChhcmNoID0+IGFyY2hpdGVjdCA9IGFyY2gpLFxuICAgIGNvbmNhdE1hcCgoKSA9PiBhcmNoaXRlY3QuZ2V0QnVpbGRlckNvbmZpZ3VyYXRpb24odGFyZ2V0U3BlYykpLFxuICAgIGNvbmNhdE1hcChjZmcgPT4gYXJjaGl0ZWN0LnJ1bihjZmcsIHsgbG9nZ2VyIH0pKSxcbiAgKTtcbn1cbiJdfQ==